Const FT_EPROM_VPP_PIN = 4
Const FT_EPROM_LATCH_PIN = 5
Const FT_EPROM_ENABLE_PIN = 6
Const FT_EPROM_READ_ENABLE_PIN = 7
Const FT_EPROM_WRITE = &HFF
Const FT_EPROM_READ = &H00

Enum FT_EPROM_IO
	FTE_INPUT
	FTE_OUTPUT
End Enum

Const CC_CE = 1
Const CC_OE = 2
Const CC_WE = 4
Class FT232H_PPROM_BASE
Protected 
	dummy AS DWord
	Address AS DWord
	Data AS DWord
	dir AS FT_EPROM_IO
	ft AS *FT232H
	mcp As *FT232H_MCP23017
	controlCache AS DWord
Public
	Sub init(ftc AS *FT232H)
		ft=ftc

		ft->gpio->setACBusDir(&HFF)
		ft->gpio->setADBusDir(&HF0)
		mcp=new FT232H_MCP23017(ft,3,60)

		mcp->SetPort(&H0000,&H0000)
		SetLatch(0)
		
		controlCache = CC_WE

		ROMEnable(TRUE)
		ReadEnable(TRUE)

		mcp->SetPortValWord(0)

		WriteEnable(FALSE)
		Address=0
		dir=FTE_INPUT

		ft->flush()		
	End Sub

	Sub ROMEnable(ef AS BOOL)
		if ef then
			if controlCache And CC_CE Then exit sub
			controlCache or= CC_CE
		Else
			if Not(controlCache) And CC_CE Then exit sub
			controlCache and= not(CC_CE)
		End If

		ft->gpio->setADBusBit(FT_EPROM_ENABLE_PIN,not(ef) AND &H01)

	End Sub

	Sub ReadEnable(ef AS BOOL)		
		if ef then
			if controlCache And CC_OE Then exit sub
			controlCache or= CC_OE
		Else
			if Not(controlCache) And CC_OE Then exit sub
			controlCache and= not(CC_OE)
		End If

		ft->gpio->setADBusBit(FT_EPROM_READ_ENABLE_PIN,not(ef) AND &H01)
		if ef=TRUE Then
			SetDatabusDirection(FTE_INPUT)
		Else
			SetDatabusDirection(FTE_OUTPUT)
		End If
	End Sub

	Sub SetAddress(adr AS DWord)(forceLatch As BOOL)
		'変更の必要がある時だけLATCH 
		if (adr xor Address) >> 16 or forceLatch Then
			SetLatch(adr>>16)
		End If

		if (((adr xor Address) >> 8) And &HFF) or forceLatch Then
			mcp->SetPortValWord(adr AS Word)
		Else
			mcp->SetPortValA(adr AS Word)
		End If

		Address=adr
	End Sub

	Sub DumpAddress()
		mcp->ReadPortRequestWord()
		ft->sendCommands()
		Dim adr as word
		ft->reciveData(VarPtr(adr),2)
		printf(ex"MCP GPIO=%0xh\n", adr)
	End Sub

	Sub SetData(data AS Byte)
		if dir=FTE_INPUT Then SetDatabusDirection(FTE_OUTPUT)
		ft->gpio->setACBus(data AS Byte)
	End Sub

	Sub ReadDataRequest()
		if dir=FTE_OUTPUT Then SetDatabusDirection(FTE_INPUT)
		ft->addCommand(ex"\x9c\x39\x00",3)				'Wait 13us
		ft->gpio->ACBusReadRequest()
	End Sub

	Sub AreaReadRequest(adr AS DWord,length As DWord)(bRD_pulse AS BOOL)
		Dim i aS DWord
		SetDatabusDirection(FTE_INPUT)
		bRD_pulse=TRUE

		if bRD_pulse Then 
			ReadEnable(FALSE)
		Else
			ReadEnable(TRUE)
		End If

		Do
			SetAddress(adr+i)
			if bRD_pulse Then 
				ft->clockWithNoData(1)
				ReadEnable(TRUE)
				ft->clockWithNoData(3)
			endif
	
			ft->gpio->ACBusReadRequest()
			
			if bRD_pulse Then ReadEnable(FALSE)				'確実にいる
			i++
			if length<=i Then ExitDo

		Loop
	End Sub

	Sub WriteEnable(ef AS BOOL)		
		if ef then
			if controlCache And CC_WE Then exit sub
			controlCache or= CC_WE
		Else
			if Not(controlCache) And CC_WE Then exit sub
			controlCache and= not(CC_WE)
		End If

		ft->gpio->setADBusBit(FT_EPROM_VPP_PIN,not(ef) AND &H01)
		if ef=FALSE Then
			SetDatabusDirection(FTE_INPUT)
		Else
			SetDatabusDirection(FTE_OUTPUT)
		End If
	End Sub	
	
	Virtual Sub WriteByte(Address AS DWord,data AS Byte)

Private

	Sub SetLatch(val AS Byte)
#ifdef 74HC373
		ft->gpio->setADBusBit(FT_EPROM_LATCH_PIN,1)		'LATCH START
		mcp->SetPortValA(val)							'LATCH SET
		ft->addCommand(ex"\x9c\x39\x00",3)				'Wait 13us
		mcp->SetPortValA(val)							'LATCH SET
		ft->gpio->setADBusBit(FT_EPROM_LATCH_PIN,0)		'LATCH HOLD
#else
		Dim cmd[4] As Byte
		cmd[0]=LSB_NEGATIVE_EDGE_BYTES_OUT	' SERIAL WRITE COMMAND
		cmd[1]=0			' LEN LOW
		cmd[2]=0			' LEN HIGH
		cmd[3]=val			' WRITE VALUE
	'	printf(ex"latch=%x\n",val)
		ft->addCommand(cmd,4)
		ft->gpio->setADBusBit(FT_EPROM_LATCH_PIN,1)		'LATCH STA
		ft->clockWithNoData(0)
		ft->gpio->setADBusBit(FT_EPROM_LATCH_PIN,0)		'LATCH HOLD
#endif
	End Sub
	
	Sub SetDatabusDirection(idr AS FT_EPROM_IO)
		dir=idr
		if idr=FTE_INPUT Then
			ft->gpio->setACBusDir(FT_EPROM_READ)
		Else
			ft->gpio->setACBusDir(FT_EPROM_WRITE)
		End If
	End Sub
End Class

Class FT232H_EPROM : Inherits FT232H_PPROM_BASE
Public
	Sub FT232H_EPROM(ftc AS *FT232H)
		init(ftc)
	End Sub

	Function AreaWirte(adr AS DWord,buffer AS BytePtr,length AS DWord)(verifyErrAddr As *DWord) AS BOOL
		Dim i AS DWord,checkBuf AS BytePtr,tmp AS DWord

	'	ft->flush()

		WriteStart()
		For i=0 To length-1
			SetAddress(adr+i,TRUE)

			WriteByte(buffer[i])

			'if i Mod &H10=0 Then ft->sendCommands("AreaWrite")
		Next i		
		WriteEnd()

		'ft->addCommand(ex"\x9c\xa0\x00",3)	'wait 55us 0x0080

		AreaWirte=TRUE '戻り値：OK

		'書き込みチェック
		checkBuf = calloc(length+5)
		fe->AreaReadRequest(adr,length)
		ft->sendCommands("[FT232H_EPROM] AreaWrite")
		ft->reciveData(checkBuf,length)

		For i=0 To length-1
			if buffer[i] <> checkBuf[i] Then
				AreaWirte=FALSE	'戻り値:NG
				if verifyErrAddr then SetDWord(verifyErrAddr, i)
				ExitFor
			End If
		Next i

		free(checkBuf)
	End Function
	
	Sub WriteByte(data AS Byte)

		'PROGRAM
		'ft->addCommand(ex"\x9c\x09\x00",3)	'Wait 
		
		SetData(data)	'SET WRITE DATA
		'SetData(data)	'SET WRITE DATA

		ft->addCommand(ex"\x9c\x20\x00",3)	'Wait

		'SetData(data)	'SET WRITE DATA
	'	ROMEnable(TRUE)						'WRITE PULSE START
		WriteEnable(TRUE)
		'SetData(data)	'SET WRITE DATA
		ft->addCommand(ex"\x9c\xff\x00",3)	'wait 55us
		'SetData(data)	'SET WRITE DATA
	'	ROMEnable(FALSE)					'WRITE PULSE END
	
		WriteEnable(FALSE)

		'wait 4us
		ft->addCommand(ex"\x9c\x40\x00",3)	'wait

		'SetData(&HFF)'次のデータで誤らないように	

	End Sub
	
Private
	Sub WriteStart()
		ROMEnable(TRUE)
		ReadEnable(TRUE)
		WriteEnable(FALSE)
	End Sub
	
	Sub WriteEnd()
		WriteEnable(FALSE)
		ft->addCommand(ex"\x9c\x09\x00",3)
	End Sub
	
End Class



'----------------------------
' EEPROM CLASS(untested)
'----------------------------

Class FT232H_FLASH  : Inherits FT232H_PPROM_BASE
Public
	Sub FT232H_FLASH(ftc AS *FT232H)
		init(ftc)
	End Sub

	Sub ChipErase()
		FlashCommand(&H5555,&HAA)
		FlashCommand(&H2AAA,&H55)
		FlashCommand(&H5555,&H80)
		FlashCommand(&H5555,&HAA)
		FlashCommand(&H2AAA,&H55)
		FlashCommand(&H5555,&H10)
		
		ft->addCommand(ex"\x9c\xf0\x00",3)	'wait 55us 0x0080
		ft->sendCommands("[FT232H_FLASH] ChipErase")
	End Sub

	Sub WriteWait()
		Dim data AS Byte
		Do
			ReadDataRequest()
			ft->sendCommands()
			ft->reciveData(VarPtr(data),1)
			printf("[%02X] ",data)
			if (data And &H40) <> 0 Then ExitDo
		Loop
	End Sub

	'この言語だとバグで継承できなかった
	Function AreaWirte(adr AS DWord,buffer AS BytePtr,length AS DWord) AS BOOL
		Dim i AS DWord,checkBuf AS BytePtr,tmp AS DWord

		ft->flush()

		WriteStart()
		For i=0 To 12'length-1
			'SetAddress(adr+i)
			
			WriteByte(adr+i,buffer[i])
			WriteWait()
			'if adr>=&H24000 then printf(ex"%08X:%02X ",adr+i,buffer[i])
			if i Mod &H10=0 Then ft->sendCommands()
		Next i

		
		AreaWirte=TRUE '戻り値：OK

		checkBuf = calloc(length+5)
		fe->AreaReadRequest(adr,length)
		ft->sendCommands()
		ft->reciveData(checkBuf,length)

		WriteEnable(FALSE)
		ROMEnable(TRUE)
		ReadEnable(TRUE)

		For i=0 To length-1
			if buffer[i] <> checkBuf[i] Then
				if length>64 Then 
					tmp=64
				Else
					tmp=length
				End If
				Print "HOST:"
				Dump(buffer,tmp,adr)
				Print "ROM : "
				Dump(checkBuf,tmp,adr)
				printf(ex"[WRITE ERROR] WRITE DATA NOT MUCH AT %08X HOST:%02X != ROM:%02X ",adr+i,buffer[i],checkBuf[i])
				if isFixableBits(buffer[i],checkBuf[i])=FALSE Then
					SetConsoleColor(CC_RED)
					Print "修復不能"
					SetConsoleColor(CC_DEFAULT)
				Else
					SetConsoleColor(CC_GREEN)
					Print "修復可能"
					SetConsoleColor(CC_DEFAULT)
				End If
				'	Input ">",tmp
				AreaWirte=FALSE	'戻り値:NG
				ExitFor
			End If
		Next i
		free(checkBuf)
		Input "128",i
	End Function

	Sub ProtectDisable()
		FlashCommand(&H5555,&HAA)
		FlashCommand(&H2AAA,&H55)
		FlashCommand(&H5555,&H80)
		FlashCommand(&H5555,&HAA)
		FlashCommand(&H2AAA,&H55)
		FlashCommand(&H5555,&H20)
		
		ft->addCommand(ex"\x9c\xf0\x03",3)	'wait 55us 0x0080
		ft->sendCommands()
	End Sub

	Sub WriteStart()

		FlashCommand(&H5555,&HAA)
		FlashCommand(&H2AAA,&H55)
		FlashCommand(&H5555,&HA0)
	End Sub

	Sub WriteByte(Address AS DWord,data AS Byte)
		printf(ex"f:%08X:%02X\n",Address,data)
	/*	FlashCommand(&H5555,&HAA)
		FlashCommand(&H2AAA,&H55)
		FlashCommand(&H5555,&HA0)*/
		FlashCommand(Address,data)
	/*	ft->addCommand(ex"\x9c\x09\x00",3)
		ft->sendCommands()*/
	End Sub



	Sub FlashCommand(adr AS DWord,data As Byte)
		ReadEnable(FALSE)
		ROMEnable(TRUE)
		WriteEnable(FALSE)

		SetAddress(adr)
		ft->addCommand(ex"\x9c\x09\x01",3)
		WriteEnable(TRUE)	'アドレス確定
		SetData(data)
		ft->addCommand(ex"\x9c\x09\x01",3)
		SetData(data)
		WriteEnable(FALSE)	'データ確定
		ft->addCommand(ex"\x9c\x09\x00",3)
	End Sub

End Class
