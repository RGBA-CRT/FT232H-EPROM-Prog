'FT232H-EPROM-Progのテストプログラム
'テスト用名ので非常にきたない
'いつかコード書き直す予定

'AB-FT232HLib
#include "..\D2XX.sbp"
#include "..\MCP23017_Lib.sbp"
#include "..\FT232HLib_debug.sbp"
'RGBALib
#include <RGBALib.sbp>

#include "ROM_Class.sbp"

#console

Print "FT232H-EPROM-PROGRAMMER Test Program - RGBA_CRT 2017-2023 v2.0"
Print
Print "Please use at your own risk!"
Print 
Dim ft AS *FT232H

ft=new FT232H((4 * 1024 * 1024) As DWord)
if ft->listupDeviceToConsole()=FALSE Then Input "[PRESS ENTER]",ft:End

Dim ftID As DWord
if ft->getNumberOfDevice() > 1 Then
	input "Select device >",ftID
Else 
	ftID=0
End If

if ft->openDevice(ftID)=FALSE Then Print "OpenError" : End
printf(ex"device #%02d open ok.\n\n",ftID)

Dim rom_size_str As String
Dim ROM_SIZE AS DWord

'Input ex"Enter ROM Size (ex:32Mbit -> 4MB)\n>",rom_size_str
rcAsciiToInt(rom_size_str, VarPtr(ROM_SIZE),10,TRUE)
if ROM_SIZE=0 Then ROM_SIZE=&H400000
printf(ex"Rom Size = %dMbit\n\n",ROM_SIZE/&H100000*8)

Sub PrintUsage()
	'Print ex"All Commands:\n  1.WriteEnable     6.SetAddress Zero   11.AddressBusTest  \n  2.WriteDisable    7.WriteROM          12.FlashProgTest   \n  3.ReadTest        8.CompROM           13.FlashProg       "
	'Print ex"  4.BufferTest      9.WriteTest         14.SetAddress  \n  5.DumpROM        10.EraseFlash        15.Blank Check    18.Blank Check(Deep)\n"
'	Print ex"Command Menu :\n  5.DumpROM\n  7.WriteROM\n  8.CompROM\n 15.BlankCheck\n"
	Print ex"Sub commands:\n" + _
		  ex"  [ENTER]  ... Print few bytes of ROM to console.\n" + _
		  ex"  set      ... Set address for print ROM.\n" + _
		  ex"  dump     ... Dump ROM image to dump.bin.\n" + _
		  ex"  dumpn    ... Dump ROM image to files with any filenames.\n" + _
		  ex"  write    ... Write ROM image to EPROM.\n" + _
		  ex"  blank    ... Check for EPROM blanks (Fast, skip most bytes).\n" + _
		  ex"  blankd   ... Check for EPROM blanks (Deep, check every byte).\n" + _
		  ex"  compare  ... Compare ROM image and EPROM."
	Print ex"  bustest  ... Test data bus and address bus (use multimeter).\n" + _
		  ex"  snes     ... Print snes header from EPROM.\n" + _
		  ex"  size     ... Change ROM size\n" + _
		  ex"  ? / help ... Show this usage.\n" + _
		  ex"  ZERO_FILL_ALL_ROM  ... Fill zero to EPROM.\n" 
End Sub


ft->gpio->setExtACBus(0)

PrintUsage()
Dim ff AS *FT232H_FLASH
ff=New FT232H_FLASH(ft)

Dim fe AS *FT232H_EPROM
fe=New FT232H_EPROM(ft)
fe->ROMEnable(TRUE)
fe->ReadEnable(TRUE)

Const BUFSIZE=64*4
Dim i AS DWord,data AS Byte,fileName AS String
Dim buf[1024+BUFSIZE] AS Byte
Dim cmd As String
i=0'&H1fe00/64-2


Do

	ft->sendCommands("before menu")
	Input ">",cmd
	rcAsciiToInt(cmd,VarPtr(ftID))
	if ftID=9999901 or cmd="DEBUG_WRITE_ENABLE" Then
		fe->WriteEnable(TRUE)
		'fe->ReadEnable(TRUE)
		Print "Write enable"

	Elseif ftID=9999902 or cmd="DEBUG_WRITE_DISABLE" Then
		fe->WriteEnable(FALSE)
		'fe->ReadEnable(FALSE)
		Print "Write disable"

	Elseif ftID=5 or cmd="dump" Then
		RomDumpFull(ROM_SIZE,"dump.bin")
		Print "saved to dump.bin"

	Elseif cmd="dumpn" Then
		Input "Enter File Name : ",fileName
		RomDumpFull(ROM_SIZE,fileName)
		printf(EX"saved to %s\n", fileName)

	Elseif ftID=6 or cmd="zero" then
		i=0

	Elseif ftID=7 or cmd="write" Then
		Print "Write ROM"
		Input "Enter File Name : ",fileName
		WriteROM(fileName,0)


	Elseif ftID=8 or cmd="compare" Then
		Print "comp ROM"
		Input "Enter File Name : ",fileName
		CompROM(StrPtr(fileName),0)
		
	Elseif ftID=11 or cmd="bustest" Then
		for i = 0 TO 32
			if i<8 then
				ff->SetData(1<<i)
				ff->SetAddress(0)
				printf(ex"D%d\n",i)
			Elseif i<32 then
				ff->SetData(0)
				ff->SetAddress(1<<(i-8))
				printf(ex"A%d\n",i-8)
			else
				ff->SetData(&HFF)
				ff->SetAddress(&HFFFFFF)
				printf(ex"AD ALL%d\n",i-8)
			endif
			ft->sendCommands()
			fe->DumpAddress()
			Input "enter>",ftID
		Next

	Elseif ftID=14 or cmd="set" Then
		Input ex"Enter Address (ex:0x0710)\n>",fileName
		rcAsciiToInt(fileName,VarPtr(i))
		i=i/BUFSIZE

	Elseif ftID=15 or cmd="blank" then 
		Dim ffCount AS DWord,i2 AS Long, errCount As BOOL
		ffCount=0
		i2=0
		errCount=0
		Const CHECK_STEP = 8
		For i=0 To (ROM_SIZE/1024) Step CHECK_STEP
			printf(ex"checking...%d%% (%d%%)         ",(i/(ROM_SIZE/1024))*100,(ffCount/(i*1024))*100*CHECK_STEP)
			ConsoleReturnLine()
			
			fe->AreaReadRequest(i*1024,1024)
			ft->sendCommands()
			ft->reciveData(buf,1024)
			
			For i2=0 To 1023 
				if buf[i2]=&HFF Then 
					ffCount++
				Else
					if errCount=0 Then printf(ex"not FF at 0x%08X  \n",i*1024 + i2)
					errCount++
				End If
			Next i2
		Next i
		printf(ex"\nBlank率：%d%%\n",ffCount/(ROM_SIZE)*100*CHECK_STEP)
		if errCount Then
			PrintPtr(ex"NOT BLANK\n")
		Else
			PrintPtr(ex"Blank!!!\n")
		End If

	Elseif ftID=18 or cmd="blankd" then 
		ffCount=0
		i2=0
		For i=0 To (ROM_SIZE/1024) 
			printf(ex"deep checking...%d%% (%d%%)         ",(i/(ROM_SIZE/1024))*100,(ffCount/(i*1024))*100*CHECK_STEP)
			ConsoleReturnLine()
			
			fe->AreaReadRequest(i*1024,1024)
			ft->sendCommands()
			ft->reciveData(buf,1024)
			For i2=0 To 1023 
				if buf[i2]<>&HFF Then
					TestDump(i*1024+i2)
					printf(ex"\n[DeepBlankCheck] ROM is not empty ::: %08X:%02X\n\n",i*1024+i2,buf[i2])
					
					goto *DEEP_CHECK_EXIT
				endif
			Next i2
		Next i
		printf(ex"\nROM is Empty.\n")
*DEEP_CHECK_EXIT

	Elseif ftID=17 or cmd="ZERO_FILL_ALL_ROM" then 
		Print "Erace ROM (zero fill) "
		Input "continue? (y/n) >",fileName
		if fileName="y" then ZeroFillROM(0,ROM_SIZE)

	elseif cmd="?" OR cmd="help" then
		PrintUsage()
	elseif cmd="ledon" then
		FT_SetDtr(ft->hFT)
	elseif cmd="ledoff" then
		FT_ClrDtr(ft->hFT)

	elseif cmd="snes" then
		Print "SNSE HEADER for LoROM"
		PrintRom(&H7FB0,64+16)
		Print "SNSE HEADER for HiROM"
		PrintRom(&HFFB0,64+16)
		
	elseif cmd="snes_all" then
		PrintRom(&H7FC0,48)
		PrintRom(&HFFC0,48)
		PrintRom(&H100000 + &H7FC0,48)
		PrintRom(&H100000 + &HFFC0,48)
		PrintRom(&H200000 + &H7FC0,48)
		PrintRom(&H200000 + &HFFC0,48)
		PrintRom(&H300000 + &H7FC0,48)
		PrintRom(&H300000 + &HFFC0,48)

	elseif cmd="size" then
		Input ex"Enter ROM Size (ex:32Mbit -> 4MB)\n>",rom_size_str
		rcAsciiToInt(rom_size_str, VarPtr(ROM_SIZE),10,TRUE)
		if ROM_SIZE=0 Then ROM_SIZE=&H400000
		printf(ex"Rom Size = %dMbit\n\n",ROM_SIZE/&H100000*8)
		
	Else
		PrintRom(i*BUFSIZE,BUFSIZE)
		i++
	Endif
	Print
Loop

Sub PrintRom(address As DWord, size As DWord)
	Dim buf[1024] As Byte
	if size > 1024 then size=1024
	fe->AreaReadRequest(address,size)
	ft->sendCommands("rom view")
	ft->reciveData(buf,size)
	Dump(buf,size,address)
End Sub

Const FTE_READ_BLOCK_SIZE = (64*512) As Long'64
Sub RomDumpFull(length AS DWord, filename AS BytePtr)
	Dim i AS DWord,out AS File,buf AS BytePtr,last AS DWord,qtes AS DWord
	buf=calloc(FTE_READ_BLOCK_SIZE)
	out.openFile(filename,GENERIC_WRITE)
	Do
		Dim Address As DWord
		Address = i*FTE_READ_BLOCK_SIZE
		if i Mod 1 = 0 Then 
			printf(ex"[DUMP] %06Xh-%06Xh / %06Xh ... %3d%% [%3dKB/s]\n", _
				Address,Address+FTE_READ_BLOCK_SIZE-1, _
				length, (Address/length*100) AS DWord, _
				( (FTE_READ_BLOCK_SIZE) / ((GetTickCount()-last)/1000)/1000   ) AS DWord, _
			) 
			'ft->gpio->setExtACBus(i)
			'ft->spi->reload()
			'flush(ft->hFT)
		Endif

		last=GetTickCount()
		fe->AreaReadRequest(i*FTE_READ_BLOCK_SIZE,FTE_READ_BLOCK_SIZE)
		ft->sendCommands("DumpRom block read")
		ft->reciveData(buf,FTE_READ_BLOCK_SIZE)
		out.write(buf,FTE_READ_BLOCK_SIZE)
		i++
		if i*FTE_READ_BLOCK_SIZE => length Then ExitDo
	Loop
	out.close()
	free(buf)

End Sub

Sub flush(hFT AS HANDLE)
	Dim ftStatus As Long,bufsize As DWord,buf As BytePtr,dwAB As DWord
	
	ftStatus = ftStatus or FT_GetQueueStatus(hFT, bufsize)		 ' Get the number of bytes in the FT2232H receive buffer
	buf=calloc(bufsize)
	if bufsize>0 then Print bufsize

		if (ftStatus = FT_OK) And  (bufsize > 0) Then _
			FT_Read(hFT, buf, bufsize, dwAB)  'Read out the data from FT2232H receive buffer
		free(buf)
	End Sub


Sub TestDump(offset As DWord)
	Const TEST_DUMP_SIZE = 48
	'if offset > 16 then offset-=16
				dim dump_buf[TEST_DUMP_SIZE] as byte
				fe->AreaReadRequest(offset, TEST_DUMP_SIZE)
				ft->sendCommands("writeROM test read")
				ft->reciveData(dump_buf,TEST_DUMP_SIZE)
				Dump(dump_buf, TEST_DUMP_SIZE, offset)
End Sub

Const FTE_WRITE_BLOCK_SIZE = 64*256
Sub WriteROM(fileName AS BytePtr,offset_in AS DWord)
	Dim in AS File
	Dim buffer AS BytePtr, offset AS DWord ,length AS DWord,tmp AS String
	Dim retry  As Long
	Dim i As File

	if in.openFile(fileName,GENERIC_READ) = FALSE Then Print "cannot open file":ExitSub
	printf(ex"[OPENFILE] %s %dbytes 0x%Xbytes\n",fileName,in.length(),in.length())

	buffer = calloc(in.length())
	in.read(buffer,in.length())
	length = in.length()
	offset=offset_in

	Dim lap_s AS DWord,lap_e AS DWord
	lap_s=GetTickCount()
	do
		Dim writeSize As DWord, verifyErrOffset As DWord
		if length - offset > FTE_WRITE_BLOCK_SIZE then
			writeSize = FTE_WRITE_BLOCK_SIZE
		Else
			writeSize = length - offset
		endif
		'printf(ex"[WRITE] ADDRESS:%08X/%08X ... %d%% \n",i,length,((i)/length*100) AS DWord,buffer[i])
		printf(ex"[WRITE] %06Xh-%06Xh / %06Xh ... %3d%%\n", _
			offset,writeSize, _
			length, (offset*100/length) AS DWord, _
			) 
		
		if fe->AreaWirte(offset,buffer+offset,writeSize, VarPtr(verifyErrOffset))=FALSE Then
			printf(ex"[WRITE] write error at Address %08Xh\n",offset + verifyErrOffset)
*INPUT_RETRY
			if retry>1 then
				Dim dumpsize=48 AS DWord, dumpoffset AS DWord
				if writeSize < dumpsize then dumpsize=writeSize
				dumpoffset=offset + verifyErrOffset - (verifyErrOffset mod 16)
				if dumpoffset>16 then dumpoffset-=16
				printf(ex"WRITE DATA:\n")
				Dump(buffer+dumpoffset, dumpsize, dumpoffset)
				printf(ex"CURRENT ROM:\n")
				TestDump(dumpoffset)
				Print "PRESS ENTER: retry, 's': skip, 'e':abort&exit, 'd':dump"
				input ">",tmp
			Else
				tmp=""
			endif

			Print
			if tmp="e" Then ExitDo
			if tmp="s" Then 
				Print "skip"
			Elseif tmp="d" Then 

				goto *INPUT_RETRY
			Else
				retry++
				continue
			End If
		End If
'		ft->sendCommands("WriteRom block write")	

		offset+=writeSize
		if offset => length Then ExitDo
		retry = 0
	Loop
	lap_e=GetTickCount()
	flush(ft->hFT)
	printf(ex"[WRITE] PROGRESS COMPLATE! time:%d\n",lap_e-lap_s)

	free(buffer)

	ft->sendCommands("WriteRom Finalize")
	in.close()
End Sub

Sub ZeroFillROM(offset As DWord , RomSize AS DWord)
	Dim buffer AS BytePtr, i AS DWord ,length AS DWord,tmp AS String
	Dim ProcSize As DWord

	ProcSize=FTE_READ_BLOCK_SIZE*2
	buffer = calloc(ProcSize)
	FillMemory(buffer,ProcSize,0)
	length = RomSize
	i=offset

	Dim lap_s AS DWord,lap_e AS DWord
	lap_s=GetTickCount()
	do
		printf(ex"[ZEROFILL] ADDRESS:%08X/%08X ... %d%%  \n",i,length,((i)/length*100) AS DWord)
		
		if fe->AreaWirte(i,buffer,ProcSize)=FALSE Then
			printf(ex"[ZEROFILL] write error at Address 0x%08X:%02X\n\n",i,buffer[0])
		End If

		i+=ProcSize
		if i => length Then ExitDo

	Loop
	lap_e=GetTickCount()
	flush(ft->hFT)
	printf(ex"[WRITE] PROGRESS COMPLATE! time:%d\n",lap_e-lap_s)

	free(buffer)

	ft->sendCommands()
End Sub

Sub WriteFlash(fileName AS BytePtr,offset AS DWord)
	Dim in AS File
	Dim buffer AS BytePtr, i AS DWord ,length AS DWord,tmp AS String

	if in.openFile(fileName,GENERIC_READ) = FALSE Then Print "cannot open file":ExitSub
	printf(ex"[OPENFILE] %s %dbytes 0x%Xbytes\n",fileName,in.length(),in.length())

	buffer = calloc(in.length())
	in.read(buffer,in.length())
	length = 128*1024'in.length()
	i=offset

	Dim lap_s AS DWord,lap_e AS DWord
	lap_s=GetTickCount()
	do
		printf(ex"[WRITE] ADDRESS:%08X/%08X ... %d%%  DATA:0x%02X\n",i,length,((i)/length*100) AS DWord,buffer[i])
		
		if ff->AreaWirte(i,buffer+i,128)=FALSE Then
			printf(ex"[WRITE] write error at Address 0x%08X:%02X\nPRESS ENTER\n",i,buffer[i])
			input ">",tmp

			Print
			if tmp="e" Then ExitDo
			if tmp<>"s" Then continue
		End If

		i+=128
		if i > length Then ExitDo

	Loop
	lap_e=GetTickCount()
	printf(ex"[WRITE] PROGRESS COMPLATE! time:%d\n",lap_e-lap_s)

	ft->sendCommands()
	in.close()
End Sub

Sub CompROM(fileName AS BytePtr,offset AS DWord)
	Dim in AS File
	Dim buffer AS BytePtr, i AS DWord ,length AS DWord,tmp AS String
	Dim romBuf AS BytePtr

	if in.openFile(fileName,GENERIC_READ) = FALSE Then Print "cannot open file":ExitSub
	printf(ex"[OPENFILE] %s %dbytes 0x%Xbytes\n",fileName,in.length(),in.length())

	romBuf=calloc(FTE_READ_BLOCK_SIZE)
	buffer = calloc(in.length())
	in.read(buffer,in.length())
	length = in.length()
	i=offset
	Dim lap_s AS DWord,lap_e AS DWord
	do
		/*if i Mod 1024 = 0 Then */printf(ex"[CHECK] ADDRESS:%08X/%08X ... %d%%  DATA:0x%02X\n",i,length,((i)/length*100) AS DWord,buffer[i])
		
		fe->AreaReadRequest(i,FTE_READ_BLOCK_SIZE)
		ft->sendCommands()
		ft->reciveData(romBuf,FTE_READ_BLOCK_SIZE)

		Dim c AS DWord
		For c=0 To FTE_READ_BLOCK_SIZE-1
			if buffer[i+c]<>romBuf[c] Then
*REASK
				printf("[CHECK] FOUND ERROR AT %08X HOST:%02X != ROM:%02X ==> ",i+c,buffer[i+c],romBuf[c])
				if isFixableBits(buffer[i+c],romBuf[c])=FALSE Then
					SetConsoleColor(CC_RED)
					Print "修復不能"
					SetConsoleColor(CC_DEFAULT)
				
				Else
					SetConsoleColor(CC_GREEN)
					Print "修復可能"
					SetConsoleColor(CC_DEFAULT)
				End If
					Input "fix it?[y/n/a/p/q/?]",tmp
					Print
					if tmp="y" Then
						fe->AreaWirte(i+c,buffer+i+c,1)
					Elseif tmp="a" Then
						fe->AreaWirte(i,buffer+i,FTE_READ_BLOCK_SIZE)
					Elseif tmp="p" then
						Dim dumpsize=48 AS DWord, dumpoffset AS DWord
						dumpoffset=i+c - ((i+c) mod 16)
						printf(ex"IMAGE DATA:\n")
						Dump(buffer+dumpoffset, dumpsize, dumpoffset)
						printf(ex"CURRENT ROM:\n")
						TestDump(dumpoffset)
						goto *REASK
					Elseif tmp="?" Then
						Print "compare help: y=yes, n=no, a=yes all, p=print data, q=quit, ?=print this help"
						Print
						goto *REASK
					Elseif tmp="q" then
						goto *EXIT_COMPARE
					Else
						Goto *FTE_CR_NOFIX
					End If
					Continue
			End If
			*FTE_CR_NOFIX
		Next c

		i+=FTE_READ_BLOCK_SIZE
		if i > length Then ExitDo

	Loop
*EXIT_COMPARE
	lap_e=GetTickCount()
	printf(ex"[WRITE] PROGRESS COMPLATE! time:%d\n",lap_e-lap_s)

	ft->sendCommands()
	in.close()
	free(romBuf)
End Sub

Function isFixableBits(HostData AS Byte,RomData AS Byte)
	Dim diff AS Byte,RomMask AS Byte
	diff=HostData xor RomData	'違うとこ探す
	RomMask = RomData And diff	'ROMが0になってるビットを洗い出す。diffのビットが一つでも消えてたらそういうこと
	if diff=RomMask Then
		isFixableBits=TRUE
	Else
		isFixableBits=FALSE
	Endif
End Function

/*
Sub WriteROM(fileName AS BytePtr,offset AS DWord)
	Dim in AS File
	Dim buffer AS BytePtr, i AS DWord ,length AS DWord,tmp AS DWord
	if in.openFile(fileName,GENERIC_READ) = FALSE Then Print "cannot open file":ExitSub
	buffer = calloc(in.length())
	in.read(buffer,in.length())
'	length = &H4200+16+1024'in.length()
	length = in.length()
	i=offset
	printf(ex"[OPENFILE] %s %dbytes 0x%Xbytes\n",fileName,in.length(),in.length())

	Dim lap_s AS DWord,lap_e AS DWord
	lap_s=GetTickCount()
	do
		if i Mod 1024 = 0 Then printf(ex"[WRITE] ADDRESS:%08X/%08X ... %d%%  DATA:0x%02X\n",i,length,((i)/length*100) AS DWord,buffer[i])
		fe->SetAddress(i)
		if fe->WriteByte(buffer[i])<>buffer[i] Then
			printf(ex"[WRITE] write error at Address 0x%08X:%02X\nPRESS ENTER\n",i,buffer[i])
			input ">",tmp
			continue
		End If
		i++
		if i > length Then ExitDo
	Loop
	lap_e=GetTickCount()
	printf(ex"[WRITE] PROGRESS COMPLATE! time:%d\n",lap_e-lap_s)

	ft->sendCommands()
	in.close()
End Sub*/
/*
Const FTE_PATCH_BUF_SIZE = 1024
Sub PatchROM(fileName AS BytePtr)
	Dim in AS File
	Dim buffer AS BytePtr, i AS DWord ,length AS DWord,tmp AS String,fix_c AS DWord
	Dim readBuf[FTE_PATCH_BUF_SIZE] AS Byte

	if in.openFile(fileName,GENERIC_READ) = FALSE Then Print "cannot open file":ExitSub

	buffer = calloc(in.length())
	in.read(buffer,in.length())
'	length = &H4200+16+1024'in.length()
	length = in.length()
'	i=&H4200
	printf(ex"[OPENFILE] %s %dbytes 0x%Xbytes\n",fileName,in.length(),in.length())

	Dim lap_s AS DWord,lap_e AS DWord
	lap_s=GetTickCount()
	do
		Input "[PATCH]Input Address : ",i
		if i < 0 Then ExitDo
		
		Print "FILE BUFFER : "
		Dump(buffer + i And &HFFFFFFF0 ,FTE_PATCH_BUF_SIZE,i And &HFFFFFFF0)

		fe->AreaReadRequest(i And &HFFFFFFF0,FTE_PATCH_BUF_SIZE)
		ft->sendCommands()
		ft->reciveData(readBuf,FTE_PATCH_BUF_SIZE)
		Print "ROM DATA : "
		Dump(readBuf,FTE_PATCH_BUF_SIZE,i And &HFFFFFFF0)

		fe->SetAddress(i)

		printf(ex"[PATCH] %08X:%02X <- %02X\n",i,buffer[i],readBuf[i And &H0F])
		Input "Fix it?[y/n] ",tmp
		if tmp="y" Then
			For fix_c=(i And &HFFFFFFF0) To FTE_PATCH_BUF_SIZE+(i And &HFFFFFFF0)-1
				if buffer[fix_c]<>readBuf[fix_c-(i And &HFFFFFFF0)] Then
					printf(ex"[PATCH] %08X:%02X <- %02X\n",fix_c,buffer[fix_c],readBuf[fix_c-(i And &HFFFFFFF0)])
					Input "Fix it?[y/n] ",tmp

					if tmp="y" Then
						fe->SetAddress(fix_c)

						if fe->WriteByte(buffer[fix_c])<>buffer[fix_c] Then
							printf(ex"[WRITE] write error at Address 0x%08X:%02X\nPRESS ENTER\n",fix_c,buffer[fix_c])
							input ">",tmp
							continue
						End If
					End If
				End If
			Next i
		End If
			

		fe->AreaReadRequest(i And &HFFFFFFF0,FTE_PATCH_BUF_SIZE)
		ft->sendCommands()
		ft->reciveData(readBuf,FTE_PATCH_BUF_SIZE)
		Print "FIXED ROM DATA : "
		Dump(readBuf,FTE_PATCH_BUF_SIZE,i And &HFFFFFFF0)
				
				Print 
				Print

		ft->sendCommands()
	Loop
	lap_e=GetTickCount()
	printf(ex"[patch] end, time:%d\n",lap_e-lap_s)

	ft->sendCommands()
	in.close()
End Sub
*/
Sub buffertest()
	Dim dat AS Byte
	Dim i AS DWord
	Do
		printf("[%d]",i)
		ft->reciveData(VarPtr(dat),1)
		printf(ex"%X\n",dat)
		i++
	Loop
End Sub

